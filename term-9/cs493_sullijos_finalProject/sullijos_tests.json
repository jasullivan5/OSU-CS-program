{
	"info": {
		"_postman_id": "0346226f-3105-4dd3-9207-7eb2aa8e39a4",
		"name": "cs493-sullijos-finalproject",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create new user",
			"item": [
				{
					"name": "Delete user 0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5ab0db08-7f5b-4a75-8f02-6bcb9e669bb7",
								"exec": [
									"pm.environment.set(\"origin\", \"https://cs493-sullijos-finalproject.appspot.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/users/{{user0ID}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"{{user0ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "45b1d540-3115-439f-bbc7-eff25193be3b",
								"exec": [
									"pm.environment.set(\"origin\", \"https://cs493-sullijos-finalproject.appspot.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/users/{{user1ID}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"{{user1ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to get JWT when no users have been created",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"// Test that status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403)",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"",
									"pm.environment.set(\"currentUser\", \"user0@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e47bd8b-e722-4567-89ae-37a1d25b27ab",
								"exec": [
									"var response = pm.response.json();",
									"pm.environment.set(\"user0ID\", response.user_id);",
									"// Test that status is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"user0@cs493-sullijos-finalproject.com\",\n\t\"password\": \"user0Password\"\n}"
						},
						"url": {
							"raw": "{{origin}}/users",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e47bd8b-e722-4567-89ae-37a1d25b27ab",
								"exec": [
									"var response = pm.response.json();",
									"pm.environment.set(\"user1ID\", response.user_id);",
									"// Test that status is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"user1@cs493-sullijos-finalproject.com\",\n\t\"password\": \"user0Password\"\n}"
						},
						"url": {
							"raw": "{{origin}}/users",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE all entities and clear variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84c4a9ba-b8b8-4ba2-8aae-b1e8f2639b5d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8debe945-3069-457a-84a9-821adaecb472",
								"exec": [
									"var user0ID = pm.environment.get(\"user0ID\");",
									"var user1ID = pm.environment.get(\"user1ID\");",
									"// Clear environment variables",
									"pm.environment.clear();",
									"",
									"// Initialize entity counts to zero",
									"pm.environment.set(\"recipeCount\", 0);",
									"pm.environment.set(\"ingredientCount\", 0);",
									"pm.environment.set(\"user0RecipeCount\", 0);",
									"pm.environment.set(\"user0IngredientCount\", 0);",
									"pm.environment.set(\"user1RecipeCount\", 0);",
									"pm.environment.set(\"user1IngredientCount\", 0);",
									"pm.environment.set(\"user0ID\", user0ID);",
									"pm.environment.set(\"user1ID\", user1ID);",
									"// Initialize origin of URL",
									"pm.environment.set(\"origin\", \"https://cs493-sullijos-finalproject.appspot.com\");",
									"// Clear idToken",
									"pm.environment.set(\"idToken\", \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/delete_all",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"delete_all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to get JWT with bad user info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"// Test that status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"userBad@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"userPasswordBad\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get id token for user 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user0@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST/GET recipe",
			"item": [
				{
					"name": "Attempt POST without JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of recipes",
									"pm.environment.set(\"idToken\", \"\");",
									"var recipeCount = pm.environment.get(\"recipeCount\");",
									"",
									"// Construct recipe",
									"var recipe = {",
									"    \"name\": \"recipe\" + recipeCount,",
									"    \"prep_time\": \"01:23\",",
									"    \"servings\": 10 + recipeCount",
									"};",
									"",
									"// Stringify recipe",
									"recipe = JSON.stringify(recipe);",
									"",
									"// Save recipe sent and set as current recipe for request body",
									"pm.environment.set(\"recipeSent\" + recipeCount, recipe);",
									"pm.environment.set(\"currentRecipe\", recipe);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipe}}"
						},
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt POST with bad JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Set idToken",
									"pm.environment.set(\"idToken\", \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlFrUkVOa1EwTTBGQk1UTkdNREl4UXpFNVJrWkNNalU0UkRoRFFVRXhOVFV4TURZNU16WkROdyJ9.eyJuaWNrbmFtZSI6ImJhZFVzZXIiLCJuYW1lIjoiYmFkVXNlckBjczQ5My1zdWxsaWpvcy1hc2dtdDcuY29tIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyL2I0NGM4NjcxZjRiYTU0MGZiYTNmYjM4MmMzZGRjNTI4P3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGdXMucG5nIiwidXBkYXRlZF9hdCI6IjIwMTktMDUtMjJUMDE6Mzk6MTEuMzQ2WiIsImlzcyI6Imh0dHBzOi8vZGV2LXplZDRjNmFuLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1Y2UxNmE5ZDJiZGUwMDBmZjQwZGI4ODQiLCJhdWQiOiJKVHA3dGRwclM1dlU2MjZJdFlCNnZiR09sTTNDTzJ3cSIsImlhdCI6MTU1ODQ4OTE1MSwiZXhwIjoxNTU4NTI1MTUxfQ.Wt1NFvN1KzFVrSL7efIyY7R590ZkrINHB_ROgsBK01dgUfLr7bsT34g9pu6rQpOvGrkcbDRfcOpqh9RmvKCWSeeIg6GS6pJmgSdq3x0PDHAKNAVadvyhych30NoGjGE0YoXDJcKSvLMBpKmpxtMWTs-p6e7G5XWEevo1PEFuf6mY4SsGmy7QhHw-D6v0ps5qDgCAkCTvnNolnzrsK9uB_X64WLJGol9FifsBPYihWZM-iwXLLvCGq5cLm_BKQn4id_q8cGfpOExXtDocR4F33HhRiTiEXM3mjWPGU6NL8wVUWGz4DNZzc1vRRMfbG9tOhHycIT_6zJLcSstZWBnYAQ\");",
									"",
									"// Get count of recipes",
									"var recipeCount = pm.environment.get(\"recipeCount\");",
									"",
									"// Construct recipe",
									"var recipe = {",
									"    \"name\": \"recipe\" + recipeCount,",
									"    \"prep_time\": \"01:23\",",
									"    \"servings\": 10 + recipeCount",
									"};",
									"",
									"// Stringify recipe",
									"recipe = JSON.stringify(recipe);",
									"",
									"// Save recipe sent and set as current recipe for request body",
									"pm.environment.set(\"recipeSent\" + recipeCount, recipe);",
									"pm.environment.set(\"currentRecipe\", recipe);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipe}}"
						},
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get id token for user 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user0@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to create invalid recipe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of recipes",
									"var recipeCount = pm.environment.get(\"recipeCount\");",
									"",
									"// Construct recipe",
									"var recipe = {",
									"    \"name\": 13,",
									"    \"prep_time\": \"01:234\",",
									"    \"servings\": \"six\"",
									"};",
									"",
									"// Stringify recipe",
									"recipe = JSON.stringify(recipe);",
									"",
									"// Save recipe sent and set as current recipe for request body",
									"pm.environment.set(\"recipeSent\" + recipeCount, recipe);",
									"pm.environment.set(\"currentRecipe\", recipe);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 422",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipe}}"
						},
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to create recipe with bad Accept header",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of recipes",
									"var recipeCount = pm.environment.get(\"recipeCount\");",
									"",
									"// Construct recipe",
									"var recipe = {",
									"    \"name\": \"recipe\" + recipeCount,",
									"    \"prep_time\": \"01:23\",",
									"    \"servings\": 10 + recipeCount",
									"};",
									"",
									"// Stringify recipe",
									"recipe = JSON.stringify(recipe);",
									"",
									"// Save recipe sent and set as current recipe for request body",
									"pm.environment.set(\"recipeSent\" + recipeCount, recipe);",
									"pm.environment.set(\"currentRecipe\", recipe);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 406",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipe}}"
						},
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST 1st recipe and save url",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of recipes",
									"var recipeCount = pm.environment.get(\"recipeCount\");",
									"",
									"// Construct recipe",
									"var recipe = {",
									"    \"name\": \"recipe\" + recipeCount,",
									"    \"prep_time\": \"01:23\",",
									"    \"servings\": 10 + recipeCount",
									"};",
									"",
									"// Stringify recipe",
									"recipe = JSON.stringify(recipe);",
									"",
									"// Save recipe sent and set as current recipe for request body",
									"pm.environment.set(\"recipeSent\" + recipeCount, recipe);",
									"pm.environment.set(\"currentRecipe\", recipe);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Get response header as JSON",
									"var header = JSON.stringify(pm.response.headers);",
									"header = JSON.parse(header);",
									"",
									"// Test that status is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    if(pm.response.to.have.status(201)){",
									"        // Get recipe count",
									"        var recipeCount = pm.environment.get(\"recipeCount\");",
									"        var user0RecipeCount = pm.environment.get(\"user0RecipeCount\");",
									"        ",
									"        // Save URL of new recipe",
									"        pm.environment.set(\"recipeURL\" + recipeCount, header[1].value);",
									"        ",
									"        // Increment recipe count",
									"        pm.environment.set(\"recipeCount\", ++recipeCount);",
									"        ",
									"        pm.environment.set(\"user0RecipeCount\", ++user0RecipeCount);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipe}}"
						},
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to get bad id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Test that status is 404",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/12345",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"12345"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to get recipe with bad Accept header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Test that status is 406",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{recipeURL0}}",
							"host": [
								"{{recipeURL0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET recipe and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var recipe = JSON.parse(pm.environment.get(\"recipeSent0\"));",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"recipeID0\", resBody.id);",
									"",
									"pm.test(\"Confirm that recipe data sent matches that in datastore\", function(){",
									"    pm.expect(recipe.name).to.be.eql(resBody.name);",
									"    pm.expect(recipe.prep_time).to.be.eql(resBody.prep_time);",
									"    pm.expect(recipe.servings).to.be.eql(resBody.servings);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{recipeURL0}}",
							"host": [
								"{{recipeURL0}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "08bf5dd7-7fb2-432f-be8b-83b5e8aab496",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a20b5107-040e-4b63-867c-8b4fe86682fc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "POST/GET ingredient",
			"item": [
				{
					"name": "Attempt POST without JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of ingredients",
									"pm.environment.set(\"idToken\", \"\");",
									"var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"",
									"// Construct ingredient",
									"var ingredient = {",
									"    \"name\": \"ingredient\" + ingredientCount,",
									"    \"units\": \"unit\" + ingredientCount,",
									"    \"quantity\": 10 + ingredientCount",
									"};",
									"",
									"// Stringify ingredient",
									"ingredient = JSON.stringify(ingredient);",
									"",
									"// Save ingredient sent and set as current ingredient for request body",
									"pm.environment.set(\"ingredientSent\" + ingredientCount, ingredient);",
									"pm.environment.set(\"currentIngredient\", ingredient);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredient}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt POST with bad JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Set idToken",
									"pm.environment.set(\"idToken\", \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlFrUkVOa1EwTTBGQk1UTkdNREl4UXpFNVJrWkNNalU0UkRoRFFVRXhOVFV4TURZNU16WkROdyJ9.eyJuaWNrbmFtZSI6ImJhZFVzZXIiLCJuYW1lIjoiYmFkVXNlckBjczQ5My1zdWxsaWpvcy1hc2dtdDcuY29tIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyL2I0NGM4NjcxZjRiYTU0MGZiYTNmYjM4MmMzZGRjNTI4P3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGdXMucG5nIiwidXBkYXRlZF9hdCI6IjIwMTktMDUtMjJUMDE6Mzk6MTEuMzQ2WiIsImlzcyI6Imh0dHBzOi8vZGV2LXplZDRjNmFuLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1Y2UxNmE5ZDJiZGUwMDBmZjQwZGI4ODQiLCJhdWQiOiJKVHA3dGRwclM1dlU2MjZJdFlCNnZiR09sTTNDTzJ3cSIsImlhdCI6MTU1ODQ4OTE1MSwiZXhwIjoxNTU4NTI1MTUxfQ.Wt1NFvN1KzFVrSL7efIyY7R590ZkrINHB_ROgsBK01dgUfLr7bsT34g9pu6rQpOvGrkcbDRfcOpqh9RmvKCWSeeIg6GS6pJmgSdq3x0PDHAKNAVadvyhych30NoGjGE0YoXDJcKSvLMBpKmpxtMWTs-p6e7G5XWEevo1PEFuf6mY4SsGmy7QhHw-D6v0ps5qDgCAkCTvnNolnzrsK9uB_X64WLJGol9FifsBPYihWZM-iwXLLvCGq5cLm_BKQn4id_q8cGfpOExXtDocR4F33HhRiTiEXM3mjWPGU6NL8wVUWGz4DNZzc1vRRMfbG9tOhHycIT_6zJLcSstZWBnYAQ\");",
									"",
									"// Get count of ingredients",
									"var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"",
									"// Construct ingredient",
									"var ingredient = {",
									"    \"name\": \"ingredient\" + ingredientCount,",
									"    \"units\": \"unit\" + ingredientCount,",
									"    \"quantity\": 10 + ingredientCount",
									"};",
									"",
									"// Stringify ingredient",
									"ingredient = JSON.stringify(ingredient);",
									"",
									"// Save ingredient sent and set as current ingredient for request body",
									"pm.environment.set(\"ingredientSent\" + ingredientCount, ingredient);",
									"pm.environment.set(\"currentIngredient\", ingredient);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredient}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get id token for user 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user0@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to create invalid ingredient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of ingredients",
									"var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"",
									"// Construct ingredient",
									"var ingredient = {",
									"    \"name\": true,",
									"    \"units\": \"unit\" + ingredientCount,",
									"    \"quantity\": \"eight\"",
									"};",
									"",
									"// Stringify ingredient",
									"ingredient = JSON.stringify(ingredient);",
									"",
									"// Save ingredient sent and set as current ingredient for request body",
									"pm.environment.set(\"ingredientSent\" + ingredientCount, ingredient);",
									"pm.environment.set(\"currentIngredient\", ingredient);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 422",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredient}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to create ingredient with bad Accept header",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of ingredients",
									"var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"",
									"// Construct ingredient",
									"var ingredient = {",
									"    \"name\": \"ingredient\" + ingredientCount,",
									"    \"units\": \"unit\" + ingredientCount,",
									"    \"quantity\": 10 + ingredientCount",
									"};",
									"",
									"// Stringify ingredient",
									"ingredient = JSON.stringify(ingredient);",
									"",
									"// Save ingredient sent and set as current ingredient for request body",
									"pm.environment.set(\"ingredientSent\" + ingredientCount, ingredient);",
									"pm.environment.set(\"currentIngredient\", ingredient);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 406",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredient}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST 1st ingredient and save url",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of ingredients",
									"var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"",
									"// Construct ingredient",
									"var ingredient = {",
									"    \"name\": \"ingredient\" + ingredientCount,",
									"    \"units\": \"unit\" + ingredientCount,",
									"    \"quantity\": 10 + ingredientCount",
									"};",
									"",
									"// Stringify ingredient",
									"ingredient = JSON.stringify(ingredient);",
									"",
									"// Save ingredient sent and set as current ingredient for request body",
									"pm.environment.set(\"ingredientSent\" + ingredientCount, ingredient);",
									"pm.environment.set(\"currentIngredient\", ingredient);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Get response header as JSON",
									"var header = JSON.stringify(pm.response.headers);",
									"header = JSON.parse(header);",
									"",
									"// Test that status is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    if(pm.response.to.have.status(201)){",
									"        // Get ingredient count",
									"        var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"        var user0IngredientCount = pm.environment.get(\"user0IngredientCount\");",
									"        ",
									"        // Save URL of new ingredient",
									"        pm.environment.set(\"ingredientURL\" + ingredientCount, header[1].value);",
									"        ",
									"        // Increment ingredient count",
									"        pm.environment.set(\"ingredientCount\", ++ingredientCount);",
									"        ",
									"        pm.environment.set(\"user0IngredientCount\", ++user0IngredientCount);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredient}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to get bad id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Test that status is 404",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{origin}}/ingredients/12345",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients",
								"12345"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to get ingredient with bad Accept header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Test that status is 406",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{ingredientURL0}}",
							"host": [
								"{{ingredientURL0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ingredient and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var ingredient = JSON.parse(pm.environment.get(\"ingredientSent0\"));",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"ingredientID0\", resBody.id);",
									"",
									"pm.test(\"Confirm that ingredient data sent matches that in datastore\", function(){",
									"    pm.expect(ingredient.name).to.be.eql(resBody.name);",
									"    pm.expect(ingredient.quantity).to.be.eql(resBody.quantity);",
									"    pm.expect(ingredient.units).to.be.eql(resBody.units);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ingredientURL0}}",
							"host": [
								"{{ingredientURL0}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f892795e-ca89-4f0e-95d3-9256de01aad7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3910e5ae-667c-45e2-a4aa-efcb91e2785d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Add/Remove ingredient to/from recipe",
			"item": [
				{
					"name": "Get id token for user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user1@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to add ingredient to recipe with wrong user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}",
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to addd ingredient to recipe without JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f04ae60a-8767-4603-a3c3-a2ed8b3e29e0",
								"exec": [
									"pm.environment.set(\"idToken\", \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}",
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to addd ingredient to recipe with bad JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f04ae60a-8767-4603-a3c3-a2ed8b3e29e0",
								"exec": [
									"// Set idToken",
									"pm.environment.set(\"idToken\", \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlFrUkVOa1EwTTBGQk1UTkdNREl4UXpFNVJrWkNNalU0UkRoRFFVRXhOVFV4TURZNU16WkROdyJ9.eyJuaWNrbmFtZSI6ImJhZFVzZXIiLCJuYW1lIjoiYmFkVXNlckBjczQ5My1zdWxsaWpvcy1hc2dtdDcuY29tIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyL2I0NGM4NjcxZjRiYTU0MGZiYTNmYjM4MmMzZGRjNTI4P3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGdXMucG5nIiwidXBkYXRlZF9hdCI6IjIwMTktMDUtMjJUMDE6Mzk6MTEuMzQ2WiIsImlzcyI6Imh0dHBzOi8vZGV2LXplZDRjNmFuLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1Y2UxNmE5ZDJiZGUwMDBmZjQwZGI4ODQiLCJhdWQiOiJKVHA3dGRwclM1dlU2MjZJdFlCNnZiR09sTTNDTzJ3cSIsImlhdCI6MTU1ODQ4OTE1MSwiZXhwIjoxNTU4NTI1MTUxfQ.Wt1NFvN1KzFVrSL7efIyY7R590ZkrINHB_ROgsBK01dgUfLr7bsT34g9pu6rQpOvGrkcbDRfcOpqh9RmvKCWSeeIg6GS6pJmgSdq3x0PDHAKNAVadvyhych30NoGjGE0YoXDJcKSvLMBpKmpxtMWTs-p6e7G5XWEevo1PEFuf6mY4SsGmy7QhHw-D6v0ps5qDgCAkCTvnNolnzrsK9uB_X64WLJGol9FifsBPYihWZM-iwXLLvCGq5cLm_BKQn4id_q8cGfpOExXtDocR4F33HhRiTiEXM3mjWPGU6NL8wVUWGz4DNZzc1vRRMfbG9tOhHycIT_6zJLcSstZWBnYAQ\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}",
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get id token for user 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user0@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt creating relationship with bad recipe id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 404",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/12345/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"12345",
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt creating relationship with bad ingredient id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 404",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}/ingredients/12345",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}",
								"ingredients",
								"12345"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to add ingredient to recipe with bad Accept Header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 406",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}",
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add ingredient to recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 204",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}",
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET recipe and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var recipe = JSON.parse(pm.environment.get(\"recipeSent0\"));",
									"var user = pm.environment.get(\"currentUser\");",
									"var ingredientID0 = pm.environment.get(\"ingredientID0\");",
									"pm.environment.set(\"recipeID0\", resBody.id);",
									"",
									"pm.test(\"Confirm that recipe data sent matches that in datastore\", function(){",
									"    pm.expect(recipe.name).to.be.eql(resBody.name);",
									"    pm.expect(recipe.prep_time).to.be.eql(resBody.prep_time);",
									"    pm.expect(recipe.servings).to.be.eql(resBody.servings);",
									"    pm.expect(resBody.ingredients[0].id).to.be.eql(ingredientID0);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{recipeURL0}}",
							"host": [
								"{{recipeURL0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ingredient and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var ingredient = JSON.parse(pm.environment.get(\"ingredientSent0\"));",
									"var user = pm.environment.get(\"currentUser\");",
									"var recipeID0 = pm.environment.get(\"recipeID0\");",
									"pm.environment.set(\"ingredientID0\", resBody.id);",
									"",
									"pm.test(\"Confirm that ingredient data sent matches that in datastore\", function(){",
									"    pm.expect(ingredient.name).to.be.eql(resBody.name);",
									"    pm.expect(ingredient.quantity).to.be.eql(resBody.quantity);",
									"    pm.expect(ingredient.units).to.be.eql(resBody.units);",
									"    pm.expect(resBody.recipes[0].id).to.be.eql(recipeID0);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ingredientURL0}}",
							"host": [
								"{{ingredientURL0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get id token for user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user1@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt deleting relationship with wrong user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}",
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt deleting relationship without JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "641ebef5-7b2b-4746-97ce-b87bda596ef3",
								"exec": [
									"pm.environment.set(\"idToken\", \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}",
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt deleting relationship with bad JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8a6aae38-6662-43ff-b37e-ff6379a3032c",
								"exec": [
									"// Set idToken",
									"pm.environment.set(\"idToken\", \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlFrUkVOa1EwTTBGQk1UTkdNREl4UXpFNVJrWkNNalU0UkRoRFFVRXhOVFV4TURZNU16WkROdyJ9.eyJuaWNrbmFtZSI6ImJhZFVzZXIiLCJuYW1lIjoiYmFkVXNlckBjczQ5My1zdWxsaWpvcy1hc2dtdDcuY29tIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyL2I0NGM4NjcxZjRiYTU0MGZiYTNmYjM4MmMzZGRjNTI4P3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGdXMucG5nIiwidXBkYXRlZF9hdCI6IjIwMTktMDUtMjJUMDE6Mzk6MTEuMzQ2WiIsImlzcyI6Imh0dHBzOi8vZGV2LXplZDRjNmFuLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1Y2UxNmE5ZDJiZGUwMDBmZjQwZGI4ODQiLCJhdWQiOiJKVHA3dGRwclM1dlU2MjZJdFlCNnZiR09sTTNDTzJ3cSIsImlhdCI6MTU1ODQ4OTE1MSwiZXhwIjoxNTU4NTI1MTUxfQ.Wt1NFvN1KzFVrSL7efIyY7R590ZkrINHB_ROgsBK01dgUfLr7bsT34g9pu6rQpOvGrkcbDRfcOpqh9RmvKCWSeeIg6GS6pJmgSdq3x0PDHAKNAVadvyhych30NoGjGE0YoXDJcKSvLMBpKmpxtMWTs-p6e7G5XWEevo1PEFuf6mY4SsGmy7QhHw-D6v0ps5qDgCAkCTvnNolnzrsK9uB_X64WLJGol9FifsBPYihWZM-iwXLLvCGq5cLm_BKQn4id_q8cGfpOExXtDocR4F33HhRiTiEXM3mjWPGU6NL8wVUWGz4DNZzc1vRRMfbG9tOhHycIT_6zJLcSstZWBnYAQ\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}",
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get id token for user 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user0@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt deleting relationship with bad recipe id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 404",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/12345/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"12345",
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt deleting relationship with bad ingredient id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 404",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}/ingredients/12345",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}",
								"ingredients",
								"12345"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to delete ingredient from recipe with bad Accept header.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 406",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}",
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete ingredient from recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 204",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}",
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET recipe and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var recipe = JSON.parse(pm.environment.get(\"recipeSent0\"));",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"recipeID0\", resBody.id);",
									"",
									"pm.test(\"Confirm that recipe data sent matches that in datastore\", function(){",
									"    pm.expect(recipe.name).to.be.eql(resBody.name);",
									"    pm.expect(recipe.prep_time).to.be.eql(resBody.prep_time);",
									"    pm.expect(recipe.servings).to.be.eql(resBody.servings);",
									"    pm.expect(resBody.ingredients.length).to.be.eql(0);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{recipeURL0}}",
							"host": [
								"{{recipeURL0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ingredient and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var ingredient = JSON.parse(pm.environment.get(\"ingredientSent0\"));",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"ingredientID0\", resBody.id);",
									"",
									"pm.test(\"Confirm that ingredient data sent matches that in datastore\", function(){",
									"    pm.expect(ingredient.name).to.be.eql(resBody.name);",
									"    pm.expect(ingredient.quantity).to.be.eql(resBody.quantity);",
									"    pm.expect(ingredient.units).to.be.eql(resBody.units);",
									"    pm.expect(resBody.recipes.length).to.be.eql(0);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ingredientURL0}}",
							"host": [
								"{{ingredientURL0}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3edeee4f-dc83-447b-b8b7-665953bd7d22",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fc33a453-b392-43c1-af7b-a0e4e7a37fe2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Update recipe",
			"item": [
				{
					"name": "Add ingredient 0 to recipe 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 204",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}",
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST 2nd ingredient and save url",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of ingredients",
									"var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"",
									"// Construct ingredient",
									"var ingredient = {",
									"    \"name\": \"ingredient\" + ingredientCount,",
									"    \"units\": \"unit\" + ingredientCount,",
									"    \"quantity\": 10 + ingredientCount",
									"};",
									"",
									"// Stringify ingredient",
									"ingredient = JSON.stringify(ingredient);",
									"",
									"// Save ingredient sent and set as current ingredient for request body",
									"pm.environment.set(\"ingredientSent\" + ingredientCount, ingredient);",
									"pm.environment.set(\"currentIngredient\", ingredient);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Get response header as JSON",
									"var header = JSON.stringify(pm.response.headers);",
									"header = JSON.parse(header);",
									"",
									"// Test that status is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    if(pm.response.to.have.status(201)){",
									"        // Get ingredient count",
									"        var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"        var user0IngredientCount = pm.environment.get(\"user0IngredientCount\");",
									"        ",
									"        // Save URL of new ingredient",
									"        pm.environment.set(\"ingredientURL\" + ingredientCount, header[1].value);",
									"        ",
									"        // Increment ingredient count",
									"        pm.environment.set(\"ingredientCount\", ++ingredientCount);",
									"        ",
									"        pm.environment.set(\"user0IngredientCount\", ++user0IngredientCount);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredient}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ingredient and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var ingredient = JSON.parse(pm.environment.get(\"ingredientSent1\"));",
									"var user = pm.environment.get(\"currentUser\")",
									"pm.environment.set(\"ingredientID1\", resBody.id);",
									"",
									"pm.test(\"Confirm that ingredient data sent matches that in datastore\", function(){",
									"    pm.expect(ingredient.name).to.be.eql(resBody.name);",
									"    pm.expect(ingredient.quantity).to.be.eql(resBody.quantity);",
									"    pm.expect(ingredient.units).to.be.eql(resBody.units);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ingredientURL1}}",
							"host": [
								"{{ingredientURL1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get id token for user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user1@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt update with wrong user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"var ingredientID1 = pm.environment.get(\"ingredientID1\");",
									"// Construct recipe",
									"var recipeUpdate = {",
									"    \"name\": \"recipeUpdate\",",
									"    \"prep_time\": \"11:11\",",
									"    \"servings\": 100,",
									"    \"ingredients\":[{\"id\":ingredientID1}]",
									"};",
									"",
									"// Stringify recipe",
									"recipeUpdate = JSON.stringify(recipeUpdate);",
									"",
									"pm.environment.set(\"currentRecipeUpdate\", recipeUpdate);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipeUpdate}}"
						},
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt update without JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"pm.environment.set(\"idToken\", \"\");",
									"var ingredientID1 = pm.environment.get(\"ingredientID1\");",
									"// Construct recipe",
									"var recipeUpdate = {",
									"    \"name\": \"recipeUpdate\",",
									"    \"prep_time\": \"11:11\",",
									"    \"servings\": 100,",
									"    \"ingredients\":[{\"id\":ingredientID1}]",
									"};",
									"",
									"// Stringify recipe",
									"recipeUpdate = JSON.stringify(recipeUpdate);",
									"",
									"pm.environment.set(\"currentRecipeUpdate\", recipeUpdate);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipeUpdate}}"
						},
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt update with bad JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Set idToken",
									"pm.environment.set(\"idToken\", \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlFrUkVOa1EwTTBGQk1UTkdNREl4UXpFNVJrWkNNalU0UkRoRFFVRXhOVFV4TURZNU16WkROdyJ9.eyJuaWNrbmFtZSI6ImJhZFVzZXIiLCJuYW1lIjoiYmFkVXNlckBjczQ5My1zdWxsaWpvcy1hc2dtdDcuY29tIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyL2I0NGM4NjcxZjRiYTU0MGZiYTNmYjM4MmMzZGRjNTI4P3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGdXMucG5nIiwidXBkYXRlZF9hdCI6IjIwMTktMDUtMjJUMDE6Mzk6MTEuMzQ2WiIsImlzcyI6Imh0dHBzOi8vZGV2LXplZDRjNmFuLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1Y2UxNmE5ZDJiZGUwMDBmZjQwZGI4ODQiLCJhdWQiOiJKVHA3dGRwclM1dlU2MjZJdFlCNnZiR09sTTNDTzJ3cSIsImlhdCI6MTU1ODQ4OTE1MSwiZXhwIjoxNTU4NTI1MTUxfQ.Wt1NFvN1KzFVrSL7efIyY7R590ZkrINHB_ROgsBK01dgUfLr7bsT34g9pu6rQpOvGrkcbDRfcOpqh9RmvKCWSeeIg6GS6pJmgSdq3x0PDHAKNAVadvyhych30NoGjGE0YoXDJcKSvLMBpKmpxtMWTs-p6e7G5XWEevo1PEFuf6mY4SsGmy7QhHw-D6v0ps5qDgCAkCTvnNolnzrsK9uB_X64WLJGol9FifsBPYihWZM-iwXLLvCGq5cLm_BKQn4id_q8cGfpOExXtDocR4F33HhRiTiEXM3mjWPGU6NL8wVUWGz4DNZzc1vRRMfbG9tOhHycIT_6zJLcSstZWBnYAQ\");",
									"",
									"var ingredientID1 = pm.environment.get(\"ingredientID1\");",
									"// Construct recipe",
									"var recipeUpdate = {",
									"    \"name\": \"recipeUpdate\",",
									"    \"prep_time\": \"11:11\",",
									"    \"servings\": 100,",
									"    \"ingredients\":[{\"id\":ingredientID1}]",
									"};",
									"",
									"// Stringify recipe",
									"recipeUpdate = JSON.stringify(recipeUpdate);",
									"",
									"pm.environment.set(\"currentRecipeUpdate\", recipeUpdate);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipeUpdate}}"
						},
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get id token for user 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user0@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to update recipe with bad ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"var ingredientID1 = pm.environment.get(\"ingredientID1\");",
									"// Construct recipe",
									"var recipeUpdate = {",
									"    \"name\": \"recipeUpdate\",",
									"    \"prep_time\": \"11:11\",",
									"    \"servings\": 100,",
									"    \"ingredients\":[{\"id\":ingredientID1}]",
									"};",
									"",
									"// Stringify recipe",
									"recipeUpdate = JSON.stringify(recipeUpdate);",
									"",
									"pm.environment.set(\"currentRecipeUpdate\", recipeUpdate);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 404",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipeUpdate}}"
						},
						"url": {
							"raw": "{{origin}}/recipes/12345",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"12345"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to update recipe with bad properties",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"var ingredientID1 = pm.environment.get(\"ingredientID1\");",
									"// Construct recipe",
									"var recipeUpdate = {",
									"    \"name\": 13,",
									"    \"prep_time\": 24,",
									"    \"servings\": \"three\",",
									"    \"ingredients\":[{\"id\":ingredientID1}]",
									"};",
									"",
									"// Stringify recipe",
									"recipeUpdate = JSON.stringify(recipeUpdate);",
									"",
									"pm.environment.set(\"currentRecipeUpdate\", recipeUpdate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 422",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipeUpdate}}"
						},
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET recipe and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var recipe = JSON.parse(pm.environment.get(\"recipeSent0\"));",
									"var user = pm.environment.get(\"currentUser\");",
									"var ingredientID0 = pm.environment.get(\"ingredientID0\");",
									"pm.environment.set(\"recipeID0\", resBody.id);",
									"",
									"pm.test(\"Confirm that recipe data sent matches that in datastore\", function(){",
									"    pm.expect(recipe.name).to.be.eql(resBody.name);",
									"    pm.expect(recipe.prep_time).to.be.eql(resBody.prep_time);",
									"    pm.expect(recipe.servings).to.be.eql(resBody.servings);",
									"    pm.expect(resBody.ingredients[0].id).to.be.eql(ingredientID0);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{recipeURL0}}",
							"host": [
								"{{recipeURL0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to update recipe with bad Accept haeder",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"var ingredientID1 = pm.environment.get(\"ingredientID1\");",
									"// Construct recipe",
									"var recipeUpdate = {",
									"    \"name\": \"recipeUpdate\",",
									"    \"prep_time\": \"11:11\",",
									"    \"servings\": 100,",
									"    \"ingredients\":[{\"id\":ingredientID1}]",
									"};",
									"",
									"// Stringify recipe",
									"recipeUpdate = JSON.stringify(recipeUpdate);",
									"",
									"pm.environment.set(\"currentRecipeUpdate\", recipeUpdate);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 406",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipeUpdate}}"
						},
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update recipe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"var ingredientID1 = pm.environment.get(\"ingredientID1\");",
									"// Construct recipe",
									"var recipeUpdate = {",
									"    \"name\": \"recipeUpdate\",",
									"    \"prep_time\": \"11:11\",",
									"    \"servings\": 100,",
									"    \"ingredients\":[{\"id\":ingredientID1}]",
									"};",
									"",
									"// Stringify recipe",
									"recipeUpdate = JSON.stringify(recipeUpdate);",
									"",
									"pm.environment.set(\"currentRecipeUpdate\", recipeUpdate);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 204",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipeUpdate}}"
						},
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET recipe and verify properties after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var recipe = JSON.parse(pm.environment.get(\"currentRecipeUpdate\"));",
									"var user = pm.environment.get(\"currentUser\");",
									"var ingredientID1 = pm.environment.get(\"ingredientID1\");",
									"pm.environment.set(\"recipeID0\", resBody.id);",
									"",
									"pm.test(\"Confirm that recipe data sent matches that in datastore\", function(){",
									"    pm.expect(recipe.name).to.be.eql(resBody.name);",
									"    pm.expect(recipe.prep_time).to.be.eql(resBody.prep_time);",
									"    pm.expect(recipe.servings).to.be.eql(resBody.servings);",
									"    pm.expect(resBody.ingredients[0].id).to.be.eql(ingredientID1);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{recipeURL0}}",
							"host": [
								"{{recipeURL0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ingredient 0 and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var ingredient = JSON.parse(pm.environment.get(\"ingredientSent0\"));",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"ingredientID0\", resBody.id);",
									"",
									"pm.test(\"Confirm that ingredient data sent matches that in datastore\", function(){",
									"    pm.expect(ingredient.name).to.be.eql(resBody.name);",
									"    pm.expect(ingredient.quantity).to.be.eql(resBody.quantity);",
									"    pm.expect(ingredient.units).to.be.eql(resBody.units);",
									"    pm.expect(resBody.recipes.length).to.be.eql(0);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ingredientURL0}}",
							"host": [
								"{{ingredientURL0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ingredient 1 and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var ingredient = JSON.parse(pm.environment.get(\"ingredientSent1\"));",
									"var user = pm.environment.get(\"currentUser\");",
									"var recipeID0 = pm.environment.get(\"recipeID0\");",
									"pm.environment.set(\"ingredientID1\", resBody.id);",
									"",
									"pm.test(\"Confirm that ingredient data sent matches that in datastore\", function(){",
									"    pm.expect(ingredient.name).to.be.eql(resBody.name);",
									"    pm.expect(ingredient.quantity).to.be.eql(resBody.quantity);",
									"    pm.expect(ingredient.units).to.be.eql(resBody.units);",
									"    pm.expect(resBody.recipes[0].id).to.be.eql(recipeID0);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ingredientURL1}}",
							"host": [
								"{{ingredientURL1}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d7ce2d6b-95a2-492b-8d45-5e027177eaaf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ee0f79b8-6e28-43d3-be67-f0a49341aaa7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Update ingredient",
			"item": [
				{
					"name": "Post 2nd recipe and save url",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of recipes",
									"var recipeCount = pm.environment.get(\"recipeCount\");",
									"",
									"// Construct recipe",
									"var recipe = {",
									"    \"name\": \"recipe\" + recipeCount,",
									"    \"prep_time\": \"01:23\",",
									"    \"servings\": 10 + recipeCount",
									"};",
									"",
									"// Stringify recipe",
									"recipe = JSON.stringify(recipe);",
									"",
									"// Save recipe sent and set as current recipe for request body",
									"pm.environment.set(\"recipeSent\" + recipeCount, recipe);",
									"pm.environment.set(\"currentRecipe\", recipe);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Get response header as JSON",
									"var header = JSON.stringify(pm.response.headers);",
									"header = JSON.parse(header);",
									"",
									"// Test that status is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    if(pm.response.to.have.status(201)){",
									"        // Get recipe count",
									"        var recipeCount = pm.environment.get(\"recipeCount\");",
									"        var user0RecipeCount = pm.environment.get(\"user0RecipeCount\");",
									"        ",
									"        // Save URL of new recipe",
									"        pm.environment.set(\"recipeURL\" + recipeCount, header[1].value);",
									"        ",
									"        // Increment recipe count",
									"        pm.environment.set(\"recipeCount\", ++recipeCount);",
									"        ",
									"        pm.environment.set(\"user0RecipeCount\", ++user0RecipeCount);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipe}}"
						},
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET recipe and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var recipe = JSON.parse(pm.environment.get(\"recipeSent1\"));",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"recipeID1\", resBody.id);",
									"",
									"pm.test(\"Confirm that recipe data sent matches that in datastore\", function(){",
									"    pm.expect(recipe.name).to.be.eql(resBody.name);",
									"    pm.expect(recipe.prep_time).to.be.eql(resBody.prep_time);",
									"    pm.expect(recipe.servings).to.be.eql(resBody.servings);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{recipeURL1}}",
							"host": [
								"{{recipeURL1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get id token for user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user1@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to update ingredient with wrong user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"var recipeID1 = pm.environment.get(\"recipeID1\");",
									"// Construct ingredient",
									"var ingredientUpdate = {",
									"    \"name\": \"ingredientUpdate\",",
									"    \"units\": \"unitsUpdate\",",
									"    \"quantity\": 100,",
									"    \"recipes\":[{\"id\":recipeID1}]",
									"};",
									"",
									"// Stringify ingredient",
									"ingredientUpdate = JSON.stringify(ingredientUpdate);",
									"",
									"pm.environment.set(\"currentIngredientUpdate\", ingredientUpdate);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredientUpdate}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients/{{ingredientID1}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients",
								"{{ingredientID1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to update ingredient without JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"pm.environment.set(\"idToken\", \"\");",
									"var recipeID1 = pm.environment.get(\"recipeID1\");",
									"// Construct ingredient",
									"var ingredientUpdate = {",
									"    \"name\": \"ingredientUpdate\",",
									"    \"units\": \"unitsUpdate\",",
									"    \"quantity\": 100,",
									"    \"recipes\":[{\"id\":recipeID1}]",
									"};",
									"",
									"// Stringify ingredient",
									"ingredientUpdate = JSON.stringify(ingredientUpdate);",
									"",
									"pm.environment.set(\"currentIngredientUpdate\", ingredientUpdate);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredientUpdate}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients/{{ingredientID1}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients",
								"{{ingredientID1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to update ingredient with bad JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Set idToken",
									"pm.environment.set(\"idToken\", \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlFrUkVOa1EwTTBGQk1UTkdNREl4UXpFNVJrWkNNalU0UkRoRFFVRXhOVFV4TURZNU16WkROdyJ9.eyJuaWNrbmFtZSI6ImJhZFVzZXIiLCJuYW1lIjoiYmFkVXNlckBjczQ5My1zdWxsaWpvcy1hc2dtdDcuY29tIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyL2I0NGM4NjcxZjRiYTU0MGZiYTNmYjM4MmMzZGRjNTI4P3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGdXMucG5nIiwidXBkYXRlZF9hdCI6IjIwMTktMDUtMjJUMDE6Mzk6MTEuMzQ2WiIsImlzcyI6Imh0dHBzOi8vZGV2LXplZDRjNmFuLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1Y2UxNmE5ZDJiZGUwMDBmZjQwZGI4ODQiLCJhdWQiOiJKVHA3dGRwclM1dlU2MjZJdFlCNnZiR09sTTNDTzJ3cSIsImlhdCI6MTU1ODQ4OTE1MSwiZXhwIjoxNTU4NTI1MTUxfQ.Wt1NFvN1KzFVrSL7efIyY7R590ZkrINHB_ROgsBK01dgUfLr7bsT34g9pu6rQpOvGrkcbDRfcOpqh9RmvKCWSeeIg6GS6pJmgSdq3x0PDHAKNAVadvyhych30NoGjGE0YoXDJcKSvLMBpKmpxtMWTs-p6e7G5XWEevo1PEFuf6mY4SsGmy7QhHw-D6v0ps5qDgCAkCTvnNolnzrsK9uB_X64WLJGol9FifsBPYihWZM-iwXLLvCGq5cLm_BKQn4id_q8cGfpOExXtDocR4F33HhRiTiEXM3mjWPGU6NL8wVUWGz4DNZzc1vRRMfbG9tOhHycIT_6zJLcSstZWBnYAQ\");",
									"",
									"pm.environment.set(\"idToken\", \"\");",
									"var recipeID1 = pm.environment.get(\"recipeID1\");",
									"// Construct ingredient",
									"var ingredientUpdate = {",
									"    \"name\": \"ingredientUpdate\",",
									"    \"units\": \"unitsUpdate\",",
									"    \"quantity\": 100,",
									"    \"recipes\":[{\"id\":recipeID1}]",
									"};",
									"",
									"// Stringify ingredient",
									"ingredientUpdate = JSON.stringify(ingredientUpdate);",
									"",
									"pm.environment.set(\"currentIngredientUpdate\", ingredientUpdate);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredientUpdate}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients/{{ingredientID1}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients",
								"{{ingredientID1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get id token for user 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user0@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to update ingredient with bad id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"var recipeID1 = pm.environment.get(\"recipeID1\");",
									"// Construct ingredient",
									"var ingredientUpdate = {",
									"    \"name\": \"ingredientUpdate\",",
									"    \"units\": \"unitsUpdate\",",
									"    \"quantity\": 100,",
									"    \"recipes\":[{\"id\":recipeID1}]",
									"};",
									"",
									"// Stringify ingredient",
									"ingredientUpdate = JSON.stringify(ingredientUpdate);",
									"",
									"pm.environment.set(\"currentIngredientUpdate\", ingredientUpdate);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 404",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});// Test that status is 404",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredientUpdate}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients/12345",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients",
								"12345"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to update ingredient with bad properties",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"var recipeID1 = pm.environment.get(\"recipeID1\");",
									"// Construct ingredient",
									"var ingredientUpdate = {",
									"    \"name\": 100,",
									"    \"units\": \"unitsUpdate\",",
									"    \"quantity\": \"three\",",
									"    \"recipes\":[{\"id\":recipeID1}]",
									"};",
									"",
									"// Stringify ingredient",
									"ingredientUpdate = JSON.stringify(ingredientUpdate);",
									"",
									"pm.environment.set(\"currentIngredientUpdate\", ingredientUpdate);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 422",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredientUpdate}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients/{{ingredientID1}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients",
								"{{ingredientID1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ingredient and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var ingredient = JSON.parse(pm.environment.get(\"ingredientSent1\"));",
									"var user = pm.environment.get(\"currentUser\")",
									"var recipeID0 = pm.environment.get(\"recipeID0\");",
									"pm.environment.set(\"ingredientID1\", resBody.id);",
									"",
									"pm.test(\"Confirm that ingredient data sent matches that in datastore\", function(){",
									"    pm.expect(ingredient.name).to.be.eql(resBody.name);",
									"    pm.expect(ingredient.quantity).to.be.eql(resBody.quantity);",
									"    pm.expect(ingredient.units).to.be.eql(resBody.units);",
									"    pm.expect(resBody.recipes[0].id).to.be.eql(recipeID0);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ingredientURL1}}",
							"host": [
								"{{ingredientURL1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to update ingredient with bad accept header",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"var recipeID1 = pm.environment.get(\"recipeID1\");",
									"// Construct ingredient",
									"var ingredientUpdate = {",
									"    \"name\": \"ingredientUpdate\",",
									"    \"units\": \"unitsUpdate\",",
									"    \"quantity\": 100,",
									"    \"recipes\":[{\"id\":recipeID1}]",
									"};",
									"",
									"// Stringify ingredient",
									"ingredientUpdate = JSON.stringify(ingredientUpdate);",
									"",
									"pm.environment.set(\"currentIngredientUpdate\", ingredientUpdate);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 406",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredientUpdate}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients/{{ingredientID1}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients",
								"{{ingredientID1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update ingredient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"var recipeID1 = pm.environment.get(\"recipeID1\");",
									"// Construct ingredient",
									"var ingredientUpdate = {",
									"    \"name\": \"ingredientUpdate\",",
									"    \"units\": \"unitsUpdate\",",
									"    \"quantity\": 100,",
									"    \"recipes\":[{\"id\":recipeID1}]",
									"};",
									"",
									"// Stringify ingredient",
									"ingredientUpdate = JSON.stringify(ingredientUpdate);",
									"",
									"pm.environment.set(\"currentIngredientUpdate\", ingredientUpdate);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Test that status is 204",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredientUpdate}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients/{{ingredientID1}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients",
								"{{ingredientID1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ingredient and verify properties after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var ingredient = JSON.parse(pm.environment.get(\"currentIngredientUpdate\"));",
									"var user = pm.environment.get(\"currentUser\")",
									"var recipeID1 = pm.environment.get(\"recipeID1\");",
									"pm.environment.set(\"ingredientID1\", resBody.id);",
									"",
									"pm.test(\"Confirm that ingredient data sent matches that in datastore\", function(){",
									"    pm.expect(ingredient.name).to.be.eql(resBody.name);",
									"    pm.expect(ingredient.quantity).to.be.eql(resBody.quantity);",
									"    pm.expect(ingredient.units).to.be.eql(resBody.units);",
									"    pm.expect(resBody.recipes[0].id).to.be.eql(recipeID1);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ingredientURL1}}",
							"host": [
								"{{ingredientURL1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET recipe 0 and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var recipe = JSON.parse(pm.environment.get(\"currentRecipeUpdate\"));",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"recipeID0\", resBody.id);",
									"",
									"pm.test(\"Confirm that recipe data sent matches that in datastore\", function(){",
									"    pm.expect(recipe.name).to.be.eql(resBody.name);",
									"    pm.expect(recipe.prep_time).to.be.eql(resBody.prep_time);",
									"    pm.expect(recipe.servings).to.be.eql(resBody.servings);",
									"    pm.expect(resBody.ingredients.length).to.be.eql(0);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{recipeURL0}}",
							"host": [
								"{{recipeURL0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET recipe 1 and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var recipe = JSON.parse(pm.environment.get(\"recipeSent1\"));",
									"var user = pm.environment.get(\"currentUser\");",
									"var ingredientID1 = pm.environment.get(\"ingredientID1\");",
									"pm.environment.set(\"recipeID1\", resBody.id);",
									"",
									"pm.test(\"Confirm that recipe data sent matches that in datastore\", function(){",
									"    pm.expect(recipe.name).to.be.eql(resBody.name);",
									"    pm.expect(recipe.prep_time).to.be.eql(resBody.prep_time);",
									"    pm.expect(recipe.servings).to.be.eql(resBody.servings);",
									"    pm.expect(resBody.ingredients[0].id).to.be.eql(ingredientID1);",
									"",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{recipeURL1}}",
							"host": [
								"{{recipeURL1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET user's/all recipes",
			"item": [
				{
					"name": "Attempt to get owner 0's recipes with bad Accept header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"// Test that status is 406",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406)",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0b4fe21e-6f52-405d-8d05-4f26fba8f4c0",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user0@cs493-sullijos-finalproject.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{origin}}/users/{{currentUser}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"{{currentUser}}",
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Owner 0's recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"var user = pm.environment.get(\"currentUser\");",
									"var resBody = pm.response.json();",
									"var user0RecipeCount = pm.environment.get(\"user0RecipeCount\");",
									"pm.test(\"Confirm that all recipes have correct owner.\", function(){",
									"    resBody.forEach(function(recipe){",
									"        pm.expect(user).to.be.eql(recipe.owner);",
									"    });",
									"});",
									"",
									"pm.test(\"Confirm that recipe count for user0 is correct.\", function(){",
									"    pm.expect(resBody.length).to.be.eql(user0RecipeCount);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0b4fe21e-6f52-405d-8d05-4f26fba8f4c0",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user0@cs493-sullijos-finalproject.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{origin}}/users/{{currentUser}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"{{currentUser}}",
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get id token for user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user1@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST recipe for user 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of recipes",
									"var recipeCount = pm.environment.get(\"recipeCount\");",
									"",
									"// Construct recipe",
									"var recipe = {",
									"    \"name\": \"recipe\" + recipeCount,",
									"    \"prep_time\": \"01:23\",",
									"    \"servings\": 10 + recipeCount",
									"};",
									"",
									"// Stringify recipe",
									"recipe = JSON.stringify(recipe);",
									"",
									"// Save recipe sent and set as current recipe for request body",
									"pm.environment.set(\"recipeSent\" + recipeCount, recipe);",
									"pm.environment.set(\"currentRecipe\", recipe);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Get response header as JSON",
									"var header = JSON.stringify(pm.response.headers);",
									"header = JSON.parse(header);",
									"",
									"// Test that status is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    if(pm.response.to.have.status(201)){",
									"        // Get recipe count",
									"        var recipeCount = pm.environment.get(\"recipeCount\");",
									"        var user1RecipeCount = pm.environment.get(\"user1RecipeCount\");",
									"        ",
									"        // Save URL of new recipe",
									"        pm.environment.set(\"recipeURL\" + recipeCount, header[1].value);",
									"        ",
									"        // Increment recipe count",
									"        pm.environment.set(\"recipeCount\", ++recipeCount);",
									"        ",
									"        pm.environment.set(\"user1RecipeCount\", ++user1RecipeCount);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipe}}"
						},
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET recipe and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var recipe = JSON.parse(pm.environment.get(\"recipeSent2\"));",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"recipeID2\", resBody.id);",
									"",
									"pm.test(\"Confirm that recipe data sent matches that in datastore\", function(){",
									"    pm.expect(recipe.name).to.be.eql(resBody.name);",
									"    pm.expect(recipe.prep_time).to.be.eql(resBody.prep_time);",
									"    pm.expect(recipe.servings).to.be.eql(resBody.servings);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{recipeURL2}}",
							"host": [
								"{{recipeURL2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST 2nd recipe for user 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of recipes",
									"var recipeCount = pm.environment.get(\"recipeCount\");",
									"",
									"// Construct recipe",
									"var recipe = {",
									"    \"name\": \"recipe\" + recipeCount,",
									"    \"prep_time\": \"01:23\",",
									"    \"servings\": 10 + recipeCount",
									"};",
									"",
									"// Stringify recipe",
									"recipe = JSON.stringify(recipe);",
									"",
									"// Save recipe sent and set as current recipe for request body",
									"pm.environment.set(\"recipeSent\" + recipeCount, recipe);",
									"pm.environment.set(\"currentRecipe\", recipe);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Get response header as JSON",
									"var header = JSON.stringify(pm.response.headers);",
									"header = JSON.parse(header);",
									"",
									"// Test that status is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    if(pm.response.to.have.status(201)){",
									"        // Get recipe count",
									"        var recipeCount = pm.environment.get(\"recipeCount\");",
									"        var user1RecipeCount = pm.environment.get(\"user1RecipeCount\");",
									"        ",
									"        // Save URL of new recipe",
									"        pm.environment.set(\"recipeURL\" + recipeCount, header[1].value);",
									"        ",
									"        // Increment recipe count",
									"        pm.environment.set(\"recipeCount\", ++recipeCount);",
									"        ",
									"        pm.environment.set(\"user1RecipeCount\", ++user1RecipeCount);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipe}}"
						},
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Owner 1's recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"var user = pm.environment.get(\"currentUser\");",
									"var resBody = pm.response.json();",
									"var user1RecipeCount = pm.environment.get(\"user1RecipeCount\");",
									"pm.test(\"Confirm that all recipes have correct owner.\", function(){",
									"    resBody.forEach(function(recipe){",
									"        pm.expect(user).to.be.eql(recipe.owner);",
									"    });",
									"});",
									"",
									"pm.test(\"Confirm that recipe count for user1 is correct.\", function(){",
									"    pm.expect(resBody.length).to.be.eql(user1RecipeCount);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0b4fe21e-6f52-405d-8d05-4f26fba8f4c0",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user1@cs493-sullijos-finalproject.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{origin}}/users/{{currentUser}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"{{currentUser}}",
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST 3rd recipe for user 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of recipes",
									"var recipeCount = pm.environment.get(\"recipeCount\");",
									"",
									"// Construct recipe",
									"var recipe = {",
									"    \"name\": \"recipe\" + recipeCount,",
									"    \"prep_time\": \"01:23\",",
									"    \"servings\": 10 + recipeCount",
									"};",
									"",
									"// Stringify recipe",
									"recipe = JSON.stringify(recipe);",
									"",
									"// Save recipe sent and set as current recipe for request body",
									"pm.environment.set(\"recipeSent\" + recipeCount, recipe);",
									"pm.environment.set(\"currentRecipe\", recipe);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Get response header as JSON",
									"var header = JSON.stringify(pm.response.headers);",
									"header = JSON.parse(header);",
									"",
									"// Test that status is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    if(pm.response.to.have.status(201)){",
									"        // Get recipe count",
									"        var recipeCount = pm.environment.get(\"recipeCount\");",
									"        var user1RecipeCount = pm.environment.get(\"user1RecipeCount\");",
									"        ",
									"        // Save URL of new recipe",
									"        pm.environment.set(\"recipeURL\" + recipeCount, header[1].value);",
									"        ",
									"        // Increment recipe count",
									"        pm.environment.set(\"recipeCount\", ++recipeCount);",
									"        ",
									"        pm.environment.set(\"user1RecipeCount\", ++user1RecipeCount);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipe}}"
						},
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"// Save count of recipes in datastore",
									"var resBody = pm.response.json();",
									"var recipeCount = pm.environment.get(\"recipeCount\");",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200.\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test that all recipes for both users are included",
									"pm.test(\"All recipes for both users were returned.\", function(){",
									"    pm.expect(resBody.recipes.length).to.be.eql(recipeCount);",
									"    pm.expect(resBody.count).to.be.eql(recipeCount);",
									"});",
									"",
									"//Test that response has no next property",
									"pm.test(\"Has no next property because count doesn't exceed page limit\", function(){",
									"    pm.expect(resBody.hasOwnProperty(\"next\")).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST 4th recipe for user 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of recipes",
									"var recipeCount = pm.environment.get(\"recipeCount\");",
									"",
									"// Construct recipe",
									"var recipe = {",
									"    \"name\": \"recipe\" + recipeCount,",
									"    \"prep_time\": \"01:23\",",
									"    \"servings\": 10 + recipeCount",
									"};",
									"",
									"// Stringify recipe",
									"recipe = JSON.stringify(recipe);",
									"",
									"// Save recipe sent and set as current recipe for request body",
									"pm.environment.set(\"recipeSent\" + recipeCount, recipe);",
									"pm.environment.set(\"currentRecipe\", recipe);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Get response header as JSON",
									"var header = JSON.stringify(pm.response.headers);",
									"header = JSON.parse(header);",
									"",
									"// Test that status is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    if(pm.response.to.have.status(201)){",
									"        // Get recipe count",
									"        var recipeCount = pm.environment.get(\"recipeCount\");",
									"        var user1RecipeCount = pm.environment.get(\"user1RecipeCount\");",
									"        ",
									"        // Save URL of new recipe",
									"        pm.environment.set(\"recipeURL\" + recipeCount, header[1].value);",
									"        ",
									"        // Increment recipe count",
									"        pm.environment.set(\"recipeCount\", ++recipeCount);",
									"        ",
									"        pm.environment.set(\"user1RecipeCount\", ++user1RecipeCount);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentRecipe}}"
						},
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to get all recipes with bad Accept header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"// Test that status is 406",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"// Save count of recipes in datastore",
									"var resBody = pm.response.json();",
									"var recipeCount = pm.environment.get(\"recipeCount\");",
									"pm.environment.set(\"recipeNextURL\", resBody.next);",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200.\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test that all recipes for both users are included",
									"pm.test(\"All recipes for both users were returned.\", function(){",
									"    pm.expect(resBody.recipes.length).to.be.eql(recipeCount - 1);",
									"    pm.expect(resBody.count).to.be.eql(recipeCount);",
									"});",
									"",
									"//Test that response has no next property",
									"pm.test(\"Has next property because count exceeds page limit\", function(){",
									"    pm.expect(resBody.hasOwnProperty(\"next\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET next page of recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"// Save count of recipes in datastore",
									"var resBody = pm.response.json();",
									"var recipeCount = pm.environment.get(\"recipeCount\");",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200.\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test that all recipes for both users are included",
									"pm.test(\"All recipes for both users were returned.\", function(){",
									"    pm.expect(resBody.recipes.length).to.be.eql(recipeCount - 5);",
									"    pm.expect(resBody.count).to.be.eql(recipeCount);",
									"});",
									"",
									"//Test that response has no next property",
									"pm.test(\"Has next property because count exceeds page limit\", function(){",
									"    pm.expect(resBody.hasOwnProperty(\"next\")).to.be.false;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{recipeNextURL}}",
							"host": [
								"{{recipeNextURL}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c1600208-6587-48eb-b65c-80a7828b75ba",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e54aa122-7463-44da-b00c-8b66812ed576",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GET user's/all ingredients",
			"item": [
				{
					"name": "Attempt to get user 0's ingredients with bad Accept header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"// Test that status is 406",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406)",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0b4fe21e-6f52-405d-8d05-4f26fba8f4c0",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user0@cs493-sullijos-finalproject.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{origin}}/users/{{currentUser}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"{{currentUser}}",
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Owner 0's ingredients",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"var user = pm.environment.get(\"currentUser\");",
									"var resBody = pm.response.json();",
									"var user0IngredientCount = pm.environment.get(\"user0IngredientCount\");",
									"pm.test(\"Confirm that all ingredients have correct owner.\", function(){",
									"    resBody.forEach(function(ingredient){",
									"        pm.expect(user).to.be.eql(ingredient.owner);",
									"    });",
									"});",
									"",
									"pm.test(\"Confirm that ingredient count for user0 is correct.\", function(){",
									"    pm.expect(resBody.length).to.be.eql(user0IngredientCount);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0b4fe21e-6f52-405d-8d05-4f26fba8f4c0",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user0@cs493-sullijos-finalproject.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{origin}}/users/{{currentUser}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"{{currentUser}}",
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get id token for user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user1@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST ingredient for user 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of ingredients",
									"var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"",
									"// Construct ingredient",
									"var ingredient = {",
									"    \"name\": \"ingredient\" + ingredientCount,",
									"    \"units\": \"unit\" + ingredientCount,",
									"    \"quantity\": 10 + ingredientCount",
									"};",
									"",
									"// Stringify ingredient",
									"ingredient = JSON.stringify(ingredient);",
									"",
									"// Save ingredient sent and set as current ingredient for request body",
									"pm.environment.set(\"ingredientSent\" + ingredientCount, ingredient);",
									"pm.environment.set(\"currentIngredient\", ingredient);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Get response header as JSON",
									"var header = JSON.stringify(pm.response.headers);",
									"header = JSON.parse(header);",
									"",
									"// Test that status is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    if(pm.response.to.have.status(201)){",
									"        // Get ingredient count",
									"        var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"        var user1IngredientCount = pm.environment.get(\"user1IngredientCount\");",
									"        ",
									"        // Save URL of new ingredient",
									"        pm.environment.set(\"ingredientURL\" + ingredientCount, header[1].value);",
									"        ",
									"        // Increment ingredient count",
									"        pm.environment.set(\"ingredientCount\", ++ingredientCount);",
									"        ",
									"        pm.environment.set(\"user1IngredientCount\", ++user1IngredientCount);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredient}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ingredient and verify properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var ingredient = JSON.parse(pm.environment.get(\"ingredientSent2\"));",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"ingredientID2\", resBody.id);",
									"",
									"pm.test(\"Confirm that ingredient data sent matches that in datastore\", function(){",
									"    pm.expect(ingredient.name).to.be.eql(resBody.name);",
									"    pm.expect(ingredient.quantity).to.be.eql(resBody.quantity);",
									"    pm.expect(ingredient.units).to.be.eql(resBody.units);",
									"    pm.expect(user).to.be.eql(resBody.owner);",
									"});",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ingredientURL2}}",
							"host": [
								"{{ingredientURL2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST 2nd ingredient for user 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of ingredients",
									"var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"",
									"// Construct ingredient",
									"var ingredient = {",
									"    \"name\": \"ingredient\" + ingredientCount,",
									"    \"units\": \"unit\" + ingredientCount,",
									"    \"quantity\": 10 + ingredientCount",
									"};",
									"",
									"// Stringify ingredient",
									"ingredient = JSON.stringify(ingredient);",
									"",
									"// Save ingredient sent and set as current ingredient for request body",
									"pm.environment.set(\"ingredientSent\" + ingredientCount, ingredient);",
									"pm.environment.set(\"currentIngredient\", ingredient);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Get response header as JSON",
									"var header = JSON.stringify(pm.response.headers);",
									"header = JSON.parse(header);",
									"",
									"// Test that status is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    if(pm.response.to.have.status(201)){",
									"        // Get ingredient count",
									"        var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"        var user1IngredientCount = pm.environment.get(\"user1IngredientCount\");",
									"        ",
									"        // Save URL of new ingredient",
									"        pm.environment.set(\"ingredientURL\" + ingredientCount, header[1].value);",
									"        ",
									"        // Increment ingredient count",
									"        pm.environment.set(\"ingredientCount\", ++ingredientCount);",
									"        ",
									"        pm.environment.set(\"user1IngredientCount\", ++user1IngredientCount);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredient}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Owner 1's ingredients",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"var user = pm.environment.get(\"currentUser\");",
									"var resBody = pm.response.json();",
									"var user1IngredientCount = pm.environment.get(\"user1IngredientCount\");",
									"pm.test(\"Confirm that all ingredients have correct owner.\", function(){",
									"    resBody.forEach(function(ingredient){",
									"        pm.expect(user).to.be.eql(ingredient.owner);",
									"    });",
									"});",
									"",
									"pm.test(\"Confirm that ingredient count for user1 is correct.\", function(){",
									"    pm.expect(resBody.length).to.be.eql(user1IngredientCount);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0b4fe21e-6f52-405d-8d05-4f26fba8f4c0",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user1@cs493-sullijos-finalproject.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{origin}}/users/{{currentUser}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"{{currentUser}}",
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST 3rd ingredient for user 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of ingredients",
									"var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"",
									"// Construct ingredient",
									"var ingredient = {",
									"    \"name\": \"ingredient\" + ingredientCount,",
									"    \"units\": \"unit\" + ingredientCount,",
									"    \"quantity\": 10 + ingredientCount",
									"};",
									"",
									"// Stringify ingredient",
									"ingredient = JSON.stringify(ingredient);",
									"",
									"// Save ingredient sent and set as current ingredient for request body",
									"pm.environment.set(\"ingredientSent\" + ingredientCount, ingredient);",
									"pm.environment.set(\"currentIngredient\", ingredient);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Get response header as JSON",
									"var header = JSON.stringify(pm.response.headers);",
									"header = JSON.parse(header);",
									"",
									"// Test that status is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    if(pm.response.to.have.status(201)){",
									"        // Get ingredient count",
									"        var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"        var user1IngredientCount = pm.environment.get(\"user1IngredientCount\");",
									"        ",
									"        // Save URL of new ingredient",
									"        pm.environment.set(\"ingredientURL\" + ingredientCount, header[1].value);",
									"        ",
									"        // Increment ingredient count",
									"        pm.environment.set(\"ingredientCount\", ++ingredientCount);",
									"        ",
									"        pm.environment.set(\"user1IngredientCount\", ++user1IngredientCount);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredient}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all ingredients",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"// Save count of ingredients in datastore",
									"var resBody = pm.response.json();",
									"var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200.\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test that all ingredients for both users are included",
									"pm.test(\"All ingredients for both users were returned.\", function(){",
									"    pm.expect(resBody.ingredients.length).to.be.eql(ingredientCount);",
									"    pm.expect(resBody.count).to.be.eql(ingredientCount);",
									"});",
									"",
									"//Test that response has no next property",
									"pm.test(\"Has no next property because count doesn't exceed page limit\", function(){",
									"    pm.expect(resBody.hasOwnProperty(\"next\")).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST 4th ingredient for user 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b7f617-4512-4fd5-a43c-cd5edd8bbb65",
								"exec": [
									"// Get count of ingredients",
									"var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"",
									"// Construct ingredient",
									"var ingredient = {",
									"    \"name\": \"ingredient\" + ingredientCount,",
									"    \"units\": \"unit\" + ingredientCount,",
									"    \"quantity\": 10 + ingredientCount",
									"};",
									"",
									"// Stringify ingredient",
									"ingredient = JSON.stringify(ingredient);",
									"",
									"// Save ingredient sent and set as current ingredient for request body",
									"pm.environment.set(\"ingredientSent\" + ingredientCount, ingredient);",
									"pm.environment.set(\"currentIngredient\", ingredient);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9050c980-8611-4aa8-909c-b79cc031def3",
								"exec": [
									"// Get response header as JSON",
									"var header = JSON.stringify(pm.response.headers);",
									"header = JSON.parse(header);",
									"",
									"// Test that status is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    if(pm.response.to.have.status(201)){",
									"        // Get ingredient count",
									"        var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"        var user1IngredientCount = pm.environment.get(\"user1IngredientCount\");",
									"        ",
									"        // Save URL of new ingredient",
									"        pm.environment.set(\"ingredientURL\" + ingredientCount, header[1].value);",
									"        ",
									"        // Increment ingredient count",
									"        pm.environment.set(\"ingredientCount\", ++ingredientCount);",
									"        ",
									"        pm.environment.set(\"user1IngredientCount\", ++user1IngredientCount);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentIngredient}}"
						},
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to get all ingredients with bad Accept header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"// Test that status is 406",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all ingredients",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"// Save count of ingredients in datastore",
									"var resBody = pm.response.json();",
									"var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"pm.environment.set(\"ingredientNextURL\", resBody.next);",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200.\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test that all ingredients for both users are included",
									"pm.test(\"All ingredients for both users were returned.\", function(){",
									"    pm.expect(resBody.ingredients.length).to.be.eql(ingredientCount - 1);",
									"    pm.expect(resBody.count).to.be.eql(ingredientCount);",
									"});",
									"",
									"//Test that response has no next property",
									"pm.test(\"Has next property because count exceeds page limit\", function(){",
									"    pm.expect(resBody.hasOwnProperty(\"next\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET next page of ingredients",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"// Save count of ingredients in datastore",
									"var resBody = pm.response.json();",
									"var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"",
									"// Test that status is 200",
									"pm.test(\"Status code is 200.\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test that all ingredients for both users are included",
									"pm.test(\"All ingredients for both users were returned.\", function(){",
									"    pm.expect(resBody.ingredients.length).to.be.eql(ingredientCount - 5);",
									"    pm.expect(resBody.count).to.be.eql(ingredientCount);",
									"});",
									"",
									"//Test that response has no next property",
									"pm.test(\"Has next property because count exceeds page limit\", function(){",
									"    pm.expect(resBody.hasOwnProperty(\"next\")).to.be.false;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ingredientNextURL}}",
							"host": [
								"{{ingredientNextURL}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c1600208-6587-48eb-b65c-80a7828b75ba",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e54aa122-7463-44da-b00c-8b66812ed576",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DELETE recipe",
			"item": [
				{
					"name": "Get id token for user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user1@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to delete recipe with wrong user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID1}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to delete recipe without JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f04ae60a-8767-4603-a3c3-a2ed8b3e29e0",
								"exec": [
									"pm.environment.set(\"idToken\", \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID1}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to delete recipe with bad JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f04ae60a-8767-4603-a3c3-a2ed8b3e29e0",
								"exec": [
									"// Set idToken",
									"pm.environment.set(\"idToken\", \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlFrUkVOa1EwTTBGQk1UTkdNREl4UXpFNVJrWkNNalU0UkRoRFFVRXhOVFV4TURZNU16WkROdyJ9.eyJuaWNrbmFtZSI6ImJhZFVzZXIiLCJuYW1lIjoiYmFkVXNlckBjczQ5My1zdWxsaWpvcy1hc2dtdDcuY29tIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyL2I0NGM4NjcxZjRiYTU0MGZiYTNmYjM4MmMzZGRjNTI4P3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGdXMucG5nIiwidXBkYXRlZF9hdCI6IjIwMTktMDUtMjJUMDE6Mzk6MTEuMzQ2WiIsImlzcyI6Imh0dHBzOi8vZGV2LXplZDRjNmFuLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1Y2UxNmE5ZDJiZGUwMDBmZjQwZGI4ODQiLCJhdWQiOiJKVHA3dGRwclM1dlU2MjZJdFlCNnZiR09sTTNDTzJ3cSIsImlhdCI6MTU1ODQ4OTE1MSwiZXhwIjoxNTU4NTI1MTUxfQ.Wt1NFvN1KzFVrSL7efIyY7R590ZkrINHB_ROgsBK01dgUfLr7bsT34g9pu6rQpOvGrkcbDRfcOpqh9RmvKCWSeeIg6GS6pJmgSdq3x0PDHAKNAVadvyhych30NoGjGE0YoXDJcKSvLMBpKmpxtMWTs-p6e7G5XWEevo1PEFuf6mY4SsGmy7QhHw-D6v0ps5qDgCAkCTvnNolnzrsK9uB_X64WLJGol9FifsBPYihWZM-iwXLLvCGq5cLm_BKQn4id_q8cGfpOExXtDocR4F33HhRiTiEXM3mjWPGU6NL8wVUWGz4DNZzc1vRRMfbG9tOhHycIT_6zJLcSstZWBnYAQ\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID1}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get id token for user 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user0@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt deleting recipe with bad recipe id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 404",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/12345",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"12345"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to delete recipe with bad accept header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Test that status is 406",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID1}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Test that status is 204",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID1}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to get recipe and confirm that it can't be found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Test that status is 404",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{recipeURL1}}",
							"host": [
								"{{recipeURL1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm that recipe 1 has been removed from ingredient 1 recipe list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var recipeID1 = pm.environment.get(\"recipeID1\");",
									"",
									"pm.test(\"Deleted recipe has been removed from recipe list of ingredient\", function(){",
									"    resBody.recipes.forEach(function(recipe){",
									"        pm.expect(recipe.id).to.not.eql(recipeID1);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ingredientURL1}}",
							"host": [
								"{{ingredientURL1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"// Save count of recipes in datastore",
									"var resBody = pm.response.json();",
									"var recipeCount = pm.environment.get(\"recipeCount\");",
									"",
									"//Test that all recipes for both users are included",
									"pm.test(\"Recipe count is one less after deletion.\", function(){",
									"    pm.expect(resBody.count).to.be.eql(recipeCount - 1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3edeee4f-dc83-447b-b8b7-665953bd7d22",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fc33a453-b392-43c1-af7b-a0e4e7a37fe2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DELETE ingredient",
			"item": [
				{
					"name": "Add ingredient 0 to recipe 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 204",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/{{recipeID0}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"{{recipeID0}}",
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get id token for user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user1@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to delete ingredient with wrong user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to delete ingredient without JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f04ae60a-8767-4603-a3c3-a2ed8b3e29e0",
								"exec": [
									"pm.environment.set(\"idToken\", \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to delete ingredient with bad JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f04ae60a-8767-4603-a3c3-a2ed8b3e29e0",
								"exec": [
									"// Set idToken",
									"pm.environment.set(\"idToken\", \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlFrUkVOa1EwTTBGQk1UTkdNREl4UXpFNVJrWkNNalU0UkRoRFFVRXhOVFV4TURZNU16WkROdyJ9.eyJuaWNrbmFtZSI6ImJhZFVzZXIiLCJuYW1lIjoiYmFkVXNlckBjczQ5My1zdWxsaWpvcy1hc2dtdDcuY29tIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyL2I0NGM4NjcxZjRiYTU0MGZiYTNmYjM4MmMzZGRjNTI4P3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGdXMucG5nIiwidXBkYXRlZF9hdCI6IjIwMTktMDUtMjJUMDE6Mzk6MTEuMzQ2WiIsImlzcyI6Imh0dHBzOi8vZGV2LXplZDRjNmFuLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1Y2UxNmE5ZDJiZGUwMDBmZjQwZGI4ODQiLCJhdWQiOiJKVHA3dGRwclM1dlU2MjZJdFlCNnZiR09sTTNDTzJ3cSIsImlhdCI6MTU1ODQ4OTE1MSwiZXhwIjoxNTU4NTI1MTUxfQ.Wt1NFvN1KzFVrSL7efIyY7R590ZkrINHB_ROgsBK01dgUfLr7bsT34g9pu6rQpOvGrkcbDRfcOpqh9RmvKCWSeeIg6GS6pJmgSdq3x0PDHAKNAVadvyhych30NoGjGE0YoXDJcKSvLMBpKmpxtMWTs-p6e7G5XWEevo1PEFuf6mY4SsGmy7QhHw-D6v0ps5qDgCAkCTvnNolnzrsK9uB_X64WLJGol9FifsBPYihWZM-iwXLLvCGq5cLm_BKQn4id_q8cGfpOExXtDocR4F33HhRiTiEXM3mjWPGU6NL8wVUWGz4DNZzc1vRRMfbG9tOhHycIT_6zJLcSstZWBnYAQ\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get id token for user 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7901f8e6-f427-40b7-8ac8-0b286f3b6fef",
								"exec": [
									"if(pm.response.to.have.jsonBody()){",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"idToken\", response.id_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cf14edd-3c87-4736-9939-9b562ec70fe4",
								"exec": [
									"pm.environment.set(\"currentUser\", \"user0@cs493-sullijos-finalproject.com\");",
									"var user = pm.environment.get(\"currentUser\");",
									"pm.environment.set(\"login\", JSON.stringify({",
									"    \"username\": user,",
									"    \"password\": \"user0Password\"",
									"}));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{login}}"
						},
						"url": {
							"raw": "{{origin}}/users/login",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt deleting ingredient with bad ingredient id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f59a94c5-9c6c-410b-9e18-15dbac353e78",
								"exec": [
									"// Test that status is 404",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/ingredients/12345",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients",
								"12345"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to delete ingredient with bad Accept header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Test that status is 406",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{origin}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE ingredient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Test that status is 204",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{idToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/ingredients/{{ingredientID0}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients",
								"{{ingredientID0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to get ingredient and confirm that it can't be found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Test that status is 404",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ingredientURL0}}",
							"host": [
								"{{ingredientURL0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm that ingredient 0 has been removed from recipe 0 ingredient list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b2f4f9d-0c14-4c28-9069-118b76f688ab",
								"exec": [
									"// Get response body",
									"var resBody = pm.response.json();",
									"var ingredientID0 = pm.environment.get(\"ingredientID0\");",
									"",
									"pm.test(\"Deleted ingredient has been removed from ingredient list of recipe\", function(){",
									"    resBody.ingredients.forEach(function(ingredient){",
									"        pm.expect(ingredient.id).to.not.eql(ingredientID0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{recipeURL0}}",
							"host": [
								"{{recipeURL0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all ingredients",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a139e8dd-70a7-4aac-8e48-a413a30ccd2b",
								"exec": [
									"// Save count of ingredients in datastore",
									"var resBody = pm.response.json();",
									"var ingredientCount = pm.environment.get(\"ingredientCount\");",
									"",
									"//Test that all ingredients for both users are included",
									"pm.test(\"Ingredient count is one less after deletion.\", function(){",
									"    pm.expect(resBody.count).to.be.eql(ingredientCount - 1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3edeee4f-dc83-447b-b8b7-665953bd7d22",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fc33a453-b392-43c1-af7b-a0e4e7a37fe2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "405 responses",
			"item": [
				{
					"name": "Attempt to delete entire recipe collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d65935e3-6b07-4383-9335-5dd77a1a7910",
								"exec": [
									"// Test that status is 405",
									"pm.test(\"Status code is 405\", function () {",
									"    pm.response.to.have.status(405);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to delete entire ingredient collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d65935e3-6b07-4383-9335-5dd77a1a7910",
								"exec": [
									"// Test that status is 405",
									"pm.test(\"Status code is 405\", function () {",
									"    pm.response.to.have.status(405);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to udpate entire recipe collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d65935e3-6b07-4383-9335-5dd77a1a7910",
								"exec": [
									"// Test that status is 405",
									"pm.test(\"Status code is 405\", function () {",
									"    pm.response.to.have.status(405);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to update entire ingredient collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d65935e3-6b07-4383-9335-5dd77a1a7910",
								"exec": [
									"// Test that status is 405",
									"pm.test(\"Status code is 405\", function () {",
									"    pm.response.to.have.status(405);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{origin}}/ingredients",
							"host": [
								"{{origin}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE all entities and clear variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84c4a9ba-b8b8-4ba2-8aae-b1e8f2639b5d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8debe945-3069-457a-84a9-821adaecb472",
								"exec": [
									"var user0ID = pm.environment.get(\"user0ID\");",
									"var user1ID = pm.environment.get(\"user1ID\");",
									"// Clear environment variables",
									"pm.environment.clear();",
									"",
									"// Initialize entity counts to zero",
									"pm.environment.set(\"recipeCount\", 0);",
									"pm.environment.set(\"ingredientCount\", 0);",
									"pm.environment.set(\"user0RecipeCount\", 0);",
									"pm.environment.set(\"user0IngredientCount\", 0);",
									"pm.environment.set(\"user1RecipeCount\", 0);",
									"pm.environment.set(\"user1IngredientCount\", 0);",
									"pm.environment.set(\"user0ID\", user0ID);",
									"pm.environment.set(\"user1ID\", user1ID);",
									"// Initialize origin of URL",
									"pm.environment.set(\"origin\", \"https://cs493-sullijos-finalproject.appspot.com\");",
									"// Clear idToken",
									"pm.environment.set(\"idToken\", \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/recipes/delete_all",
							"host": [
								"{{origin}}"
							],
							"path": [
								"recipes",
								"delete_all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user 0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5ab0db08-7f5b-4a75-8f02-6bcb9e669bb7",
								"exec": [
									"pm.environment.set(\"origin\", \"https://cs493-sullijos-finalproject.appspot.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/users/{{user0ID}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"{{user0ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "45b1d540-3115-439f-bbc7-eff25193be3b",
								"exec": [
									"pm.environment.set(\"origin\", \"https://cs493-sullijos-finalproject.appspot.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{origin}}/users/{{user1ID}}",
							"host": [
								"{{origin}}"
							],
							"path": [
								"users",
								"{{user1ID}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9eee66a3-09d1-4289-8bc3-aabf430bd823",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6ce3b3ae-e25f-49aa-8a8d-77f810ff0998",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}